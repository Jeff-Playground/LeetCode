Design user system:
    Scenario:
        Many reads and few writes, can be optimized by cache
    Storage:
        SQL - 1k QPS
        NoSQL - 10k QPS
        Cache - 1m QPS
            LRU/LFU for updating cache
            Memcached(cache aside): memory only, better stability and scalability
            Redis(cache through): supports physical persistence
    Service:
        Authentication service: by session
            session normally has session_key, user_id, ttl
            session_key will be sent back to user, and will be included in all requests' cookies
        Friendship service:
            Relationship can be stored in one direction(1 row), or in both ways(2 rows)
            For storing relationship:
                both SQL and NoSQL are fine in this case
                SQL vs NoSQL:
                    SQL supports transactions better
                    SQL is more mature, while NoSQL some things need to be taken care by user(serialization, secondary index)
                    NoSQL normally has better performance
                    NoSQL normally doesn't support multi-indexes
                    NoSQL comes with sharding, SQL sharding has to be handled by developers
                Cassandra:
                    wide-column NoSQL DB
                    row_key: hash key/partition key
                    column_key: can be queried by range
                    value: not easily queryable, can be used to store metadata
    Scale:
        Single point failure:
            Sharding: distribute data to different nodes, one node down won't bring down the whole system
                Vertical sharding: divide data by columns
                Horizontal sharding: divide data by key range
                    Consistent hashing
            Replica: distribute reads to more nodes, and increase data safety
                Master-slave: master for write and read, slave for read only