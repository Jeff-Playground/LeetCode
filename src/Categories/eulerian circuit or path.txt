Eulerian circuit is a path that uses all the edges of a graph, and it starts and ends at the same vertex.
Eulerian path is a path that uses all the edges of a graph, which doesn't necessarily starts and ends at the same vertex.

Both Eulerian circuit and path can be applied to both directed and undirected graph.

If an Eulerian circuit exists in a graph, then there's definitely an Eulerian path exists in the same graph.

To check whether an Eulerian circuit or an Eulerian path exists in an undirected graph:
-   An Eulerian circuit exists if every vertex has an even degree.(will be multiple Eulerian circuits)
-   An Eulerian path exists if at most 2 vertices have an odd degree.

To check whether an Eulerian circuit or an Eulerian path exists in a directed graph:
-   An Eulerian circuit exists if every vertex has an equal in and out degree.(will be multiple Eulerian circuits)
-   An Eulerian path exists if at most 2 vertices don't have an equal in and out degree, and one of them has to be
    (in-out)==1 and the other has to be (out-in)==1.(The vertex with (out-in)==1 should be the start and the vertex with
    (in-out)==1 should be the end)

BTW, a graph has to have an even number of vertices with odd degrees, because (the sum of all vertices degree) ==
2*(the number of all edges), therefore, for above the 2 vertices with odd degrees should always be the start and the end
for the Eulerian path. Moreover, in a directed graph this determines the only start and end for the Eulerian path.

If a graph has an Eulerian circuit, then the Eulerian path can start/end from any vertex.

To find an Eulerian path, just do DFS and iterate over all out edges which is not visited starting from the valid starting
node, and after the loop note down the node, beware the final path generated is in reversed order.

Note here we normally use a Queue or a PriorityQueue(when there's a requirement on the ordering of the nodes), the point
is this can make removing a visited edge much easier.

- 300 -
*Reconstruct Itinerary  (Eulerian path with nodes)
- 350 -
- 400 -
- 450 -
- 500 -
- 550 -
- 600 -
- 650 -
- 700 -
- 750 -
*Cracking the Safe
- 800 -
- 850 -
- 900 -
- 950 -
- 1000 -
- 1050 -
- 1100 -
- 1150 -
- 1200 -
- 1250 -
- 1300 -
- 1350 -
- 1400 -
- 1450 -
- 1500 -
- 1550 -
- 1600 -
- 1650 -
- 1700 -
- 1750 -
- 1800 -
- 1850 -
- 1900 -
- 1950 -
- 2000 -
- 2050 -
*Valid Arrangement of Pairs (Eulerian path with edges)
- 2100 -