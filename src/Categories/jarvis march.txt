a.k.a. gift wrapping

This depends on the vector cross product:
int cur=dx1*dy2-dy1*dx2;

The cross product can be positive, negative or 0, which identifies the location of the 2 vectors. The underlying logic
for cross product is trying to multiply the 2 smaller dx and dy and the 2 bigger dx and dy, than subtract one by another,
if the result is 0, then the 2 vectors are on the same line.

It can be completed in below steps:
1. Find the vertex located in the lower left corner, this ensures the found point is a vertex instead of some other points
   on the line
2. Iterate over all other points, basically pick one point as next, then use a third point to compute the cross product,
   make sure the result are all positive(clock-wise) or negative(anti-clock-wise), this will eventually find the most
   outside vertex.
   Use a PriorityQueue to store all the collinear points, the comparator of the pq should ensure we can get the point
   closest to the starting point first later when we retrieve the points. Note the size of the pq will be at least 1 when
   the iteration is done. If it's 1, it just means the found edge has no other points on it.
   In the end, put all the points found in the pq into the result fence, and use the furthest point as next starting point.
3. Repeat 2 until next starting point is the first vertex, now a fence is found.

- 300 -
- 350 -
- 400 -
- 450 -
LQConvexPolygon
- 500 -
- 550 -
*Erect the Fence
- 600 -
- 650 -
- 700 -
- 750 -
- 800 -
- 850 -
- 900 -