This is depends on the vector cross product:
int cur=dy2*dx1-dy1*dx2;

It can be completed in below steps:
1. find the vertex located on the left of all other nodes, if there're multiple, then randomly pick one(this is just take
   the vertex with minimum x)
2. iterate over all other vertices, basically pick one node as next, then use a third node to compute the cross product,
   make sure the result are all positive(clock-wise) or negative(anti-clock-wise), this will eventually find the most
   outside vertex
        if(nextIdx==curIdx || cp>0 || (cp==0 && dist(points, i, curIdx)>dist(points, nextIdx, curIdx))){
            nextIdx=i;
        }
   this is basically just find a vertex different with the starting vertex, and it's clock-wise most outside one, when
   the calculated cross product is 0, that means they're on the same line, so get the one further to the starting vertex.
   When next vertex is found, use another loop to find all vertex on the same line. This can be done by find all vertex
   which can produce a 0 cross product.
3. repeat 2 until next is the first vertex, now a fence is found.

- 300 -
- 350 -
- 400 -
- 450 -
- 500 -
- 550 -
*Erect the Fence
- 600 -
- 650 -
- 700 -
- 750 -
- 800 -
- 850 -
- 900 -