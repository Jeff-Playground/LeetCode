Implemented by maintaining two arrays of int[] ids and lows, where ids stores the id of the nodes when it's being DFS
traversed for the first time, and lows stores the smallest id which can be reached from the nodes. When lows[i]==i, this
node is the start node of a strongly connected component, and the number of cases when lows[i]==i is the number of strongly
connected components in the graph.
Used to find the strongly connected components in a DIRECTED graph. If the number of strongly connected components is 1,
then the directed graph itself is strongly connected. Note this is better than Kosaraju's algorithm because it only requires
1 time DFS of the graph.
It can be further used in below cases:
Find bridges(undirected graph): the trick here is to find the edges for which the child vertex can't reach vertices with
                                smaller ids than parent without the (parent, child) edge
Find articulation points(undirected graph): the trick here is to find two kinds of vertices:
                                            1. root with multiple children
                                            2. non-root with children which can't reach vertices with smaller ids than parent
Verify bi-connected graph(undirected graph): the trick here is to ensure the graph is connected, and:
                                                there's no articulation points in the graph
                                                or
                                                there's no bridge in the graph

- 300 -
- 350 -
- 400 -
- 450 -
- 500 -
- 550 -
- 600 -
- 650 -
- 700 -
- 750 -
- 800 -
- 850 -
- 900 -
- 950 -
- 1000 -
- 1050 -
- 1100 -
- 1150 -
*Critical Connections in a Network  (Find bridges)
- 1200 -