Used for one to many minimum path, note this can also handle graph with negative edges.

SPFA stands for "the Shortest Path Faster Algorithm", it is an optimized version of bellman-ford, iterate over the all
the given edges to search and relax the minimum length to reach each node.
The difference is it uses a Queue to store current reached nodes, so the edge iteration can be more targeted.

Use one dimensional array: int[] last, to track the last node of the shortest path, because there's only one source, not
necessary to use two-dimensional array.

Use one dimensional array: int[] count to store the times that each node is relaxed, if it's >N, then there's a negative
loop. Because a node can be relaxed by any other nodes in the graph, and there are N-1 nodes apart from the node being
relaxed. So if a node is relaxed more than (N-1) times, it means there has to be at least one other node used more than
once, so there is a negative loop. Also note use N instead of (N-1) to handle the case when there's only one node(N==1)

        int[] cost=new int[n];
        // int[] count=new int[n];
        Arrays.fill(cost, Integer.MAX_VALUE);
        cost[src]=0;
        Queue<Integer> q=new LinkedList<>();
        q.offer(src);
        // count[src]++;
        int cnt=0;
        while(!q.isEmpty() && cnt<=K){
            int size=q.size();
            // Note here introduce last to store last level's state, not required in normal SPFA
            int[] last=Arrays.copyOf(cost, n);
            while(size-->0){
                int cur=q.poll();
                for(int[] flight: flights){
                    // Note last[flight[0]]+flight[2]<cost[flight[1]] to avoid cost affected by nodes from same level(
                    // When it's affected, it adds a stop before the affected node, which makes cnt useless)
                    if(flight[0]==cur && last[flight[0]]+flight[2]<cost[flight[1]]){
                        cost[flight[1]]=last[flight[0]]+flight[2];
                        q.offer(flight[1]);
                        // Logic to determine whether there's a negative loop
                        // Note here normally should be >n-1, but to handle the case when n==1, give N
                        // if(++count[flight[1]]>n){
                        //     return -1;
                        // }
                    }
                }
            }
            cnt++;
        }

- 300 -
- 350 -
- 400 -
- 450 -
- 500 -
- 550 -
- 600 -
- 650 -
- 700 -
*Network Delay Time
- 750 -
*Cheapest Flights Within K Stops
- 800 -
- 850 -
- 900 -
- 950 -
- 1000 -
- 1050 -
- 1100 -
- 1150 -
- 1200 -
- 1250 -
- 1300 -
- 1350 -
- 1400 -
- 1450 -
- 1500 -
- 1550 -
- 1600 -
*Path With Minimum Effort
- 1650 -
- 1700 -
- 1750 -
- 1800 -
- 1850 -
- 1900 -
- 1950 -
- 2000 -
- 2050 -