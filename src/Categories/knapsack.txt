Another special case for dynamic programming, for all knapsack approaches, dp[i][j] stands for the total when included
item i and the total capacity is j:

For 0-1 knapsack, for i in 1->N and j in 0->S it's dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]], which in other words, is
the sum of two cases:
1. the case when nums[i-1] is excluded
2. the case when nums[i-1] is included
Note when optimizing to 1 dimensional array, the loop condition for j is reversed from 0->S to S->0, that's because
dp[j] is dependent on dp[j] and dp[j-nums[i-1]], which means dp[j-nums[i-1]] need to be available, so doing in 0->S
order would overwrite this value.

For bounded knapsack, it's similar to 0-1 knapsack except there's a max for each item, so there's an additional loop
for k in 0->max, and dp[i][j]+=dp[i-1][j-k*nums[i-1]].
When optimizing to 1 dimensional array, the j loop is also reversed, but note it becomes k in max->1 instead of max->0
because dp[j] already included the value for k=0.

For unbounded knapsack, it's similar to 0-1 knapsack except dp[i][j]=dp[i-1][j]+dp[i][j-nums[i-1]], where the second
case becomes the last value when nums[i-1] is considered(not necessarily included).
When optimizing to 1 dimensional array, it's not like the above and j is not reversed, because this time dp[i][j] is
dependent on dp[i][j-nums[i-1]] which is from previous value in the same loop.

- 300 -
*Coin Change     (bounded knapsack, unbounded knapsack)
- 350 -
- 400 -
*Partition Equal Subset Sum     (0-1 knapsack)
- 450 -
*Target Sum     (0-1 knapsack)
- 500 -
*Coin Change 2     (bounded knapsack, unbounded knapsack)
- 550 -
- 600 -
- 650 -
- 700 -
- 750 -
- 800 -
*Split Array With Same Average     (0-1 knapsack)
- 850 -
- 900 -