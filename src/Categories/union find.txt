Union find can be used to identify whether there are cycles in a graph.
Use an int array group to store the group info for nodes, and another int array rank to store the level of nodes in
the graph. Union find should support add, find and union. Note the union logic need to be written with care to avoid
cycles.

The related optimizations are:
    - Path compression
    - Union by rank to aim for a more balanced graph/tree

*Longest Consecutive Sequence
*LQGraphValidTree
- 300 -
LQNumberOfConnectedComponentsInAnUndirectedGraph
*LQNumberOfIslandsII
- 350 -
*Evaluate Division
- 400 -
- 450 -
- 500 -
Friend Circles
- 550 -
- 600 -
- 650 -
*Redundant Connection
*Redundant Connection II
Max Area of Island
- 700 -
*Accounts Merge
- 750 -
*Couples Holding Hands
*Is Graph Bipartite?
- 800 -
*Bricks Falling When Hit
Linked List Components
Making A Large Island
Similar String Groups
- 850 -
- 900 -
*Most Stones Removed with Same Row or Column
- 950 -
- 1000 -
- 1050 -
- 1100 -
LQTheEarliestMomentWhenEveryoneBecomeFriends
- 1150 -
- 1200 -
- 1250 -
- 1300 -