This is useful for storing range info which the items need to be updated frequently, because the update only affects
O(logn) of the storing elements instead of O(n).

In a binary indexed tree, length is l+1, indexes starts from 1, parentIndex=childIndex+lowbit(childIndex), lowbit can
be calculated by x&(-x), and it should support below functions:
- update
- findSum(get Sum of numbers before idx inclusively)
- findRange: findSum(i2)-findSum(i1)

This can be extended to 2D to solve a 2D problem

A good reference: https://halfrost.com/binary_indexed_tree

    class NumArray {
        int[] nums=null;
        int[] biTree=null;

        public NumArray(int[] nums) {
            this.nums=new int[nums.length];
            this.biTree=new int[nums.length+1];
            for(int i=0; i<nums.length; i++){
                update(i, nums[i]);
            }
        }

        public void update(int i, int val) {
            if(i<0 || i>nums.length-1){
                return;
            }
            int diff=val-nums[i];
            nums[i]=val;
            for(int j=i+1; j<biTree.length; j+=(j&(-j))){
                biTree[j]+=diff;
            }
        }

        public int getSum(int i){
            if(i+1>biTree.length-1){
                i=biTree.length-2;
            }
            int result=0;
            for(int j=i+1; j>0; j-=(j&(-j))){
                result+=biTree[j];
            }
            return result;
        }

        public int sumRange(int i, int j) {
            return getSum(j)-getSum(i-1);
        }
    }

- 300 -
*Range Sum Query - Mutable
*LQRangeSumQuery2DMutable
*Count of Smaller Numbers After Self
*Count of Range Sum
- 350 -
- 400 -
- 450 -
*Reverse Pairs
- 500 -
Random Pick with Weight
- 550 -
- 600 -
- 650 -
*LQKEmptySlots
- 700 -
- 750 -
- 800 -
- 850 -
- 900 -