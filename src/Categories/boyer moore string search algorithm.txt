Boyer Moore string search algorithm is an algorithm similar to KMP, as both algorithms aim to move the needle string
against the haystack string in an optimized way and take advantage of the info pre-calculated using the needle string
only.
A good reference: https://writings.sh/post/algorithm-string-searching-boyer-moore

Not like KMP where it generates and maintains an array int[] next, where next[i] stands for the index to move to when
needle.charAt(i) gets a mismatch, Boyer Moore maintains two arrays:
    int[] badCharDist
        of length 256, which matches with extended ASCII table
        this is always useful because there's always going to be a bad char for a mismatch
        badCharDist[c] stores the distance for THE HAYSTACK INDEX needs to be moved when mismatch happens for char c
        this is essentially find the rightmost char c in needle, which is already present in haystack
    int[] goodSuffixDist
        of length needle.length()
        this is only useful when for the mismatch there's a good suffix matched
        goodSuffixDist[i] stores the distance for THE HAYSTACK INDEX needs to be moved when mismatch happens at needle.charAt(i)
        this is essentially find the rightmost same good suffix in needle, which is already present in haystack

With the above two arrays, the searching will start with placing the needle at the beginning of the haystack, then
search starting from the END of the needle, something like below:
    List<Integer> matches=new ArrayList<>();
    int hl=haystack.length(), nl=needle.length();
    int i=nl-1;
    while(i<hl){
        int j=nl-1;
        while(j>=0 && needle.charAt(j)==haystack.charAt(i)){
            i--;
            j--;
        }
        if(j==-1){  // There is a match
            matches.add(i+1);
            i+=nl+1;    // Restart from the next char from the original i
        } else{     // No match
            // For why i increases with below value, this can be proved, a easy way to remember this is assuming the
            // mismatched bad char is at the end of needle, which is a special case here
            i+=Math.max(badCharDist[haystack.charAt(i)], goodSuffixDist[j]);
        }
    }
    return matches;

For the actual searching logic above, badCharDist and goodSuffixDist can be calculated like below:
For badCharDist:
    int nl=needle.length();
    int[] badCharDist=new int[256];
    Arrays.fill(badCharDist, nl);   // Fill in a default value of nl, which is useful when the bad char is not in needle
    for(int i=0; i<nl; i++){    // Start from 0, so the final result is for the RIGHTMOST char in case duplicates
        badCharDist[needle.charAt(i)]=nl-1-i;
    }
For goodSuffixDist:
    int nl=needle.length();
    int[] goodCharDist=new int[nl];
    goodCharDist[nl-1]=1;   // When the good suffix is "" which is useless, move 1

    // The goal here is to find the minimum distance to move eventually

    // First part starts with assuming the good suffix appears at the beginning of needle, which would have a bigger
    // distance, and can be updated as needed in next part
    int longestPrefixLength=0;
    for(int i=nl-2; i>=0; i--){
        int curSuffixLength=nl-1-i;
        if(needle.startsWith(needle.substring(i+1))){
            longestPrefixLength=curSuffixLength;
        }
        // Note this distance is the distance for haystack index to move, NOT the distance for needle to move
        goodSuffixDist[i]=nl+curSuffixLength-longestPrefixLength;
    }

    // Second part will find the cases where the good suffix appears in the middle of needle, and update the values from
    // the first part
    // This logic would attempt to use each i as the end of the suffix and find the longest common suffix for the updates
    for(int i=0; i<nl-1; i++){
        int longestCommonSuffixLength=0, j=nl-1;
        while(i-longestCommonSuffixLength>=0 && needle.charAt(i-longestCommonSuffixLength)==needle.charAt(j)){
            j--;
            longestCommonSuffixLength++;
        }
        if(longestCommonSuffixLength>0){
            goodSuffixDist[nl-1-longestCommonSuffixLength]=nl-1-i+longestCommonSuffixLength;
        }
    }