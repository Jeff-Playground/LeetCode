Another special case for dynamic programming, can be used to compute the maximum subarray sum.

// Given an input array of numbers "nums",
1. best = negative infinity
2. current = 0
3. for num in nums:
    3.1. current = Max(current + num, num)
    3.2. best = Max(best, current)
4. return best

*Maximum Subarray
- 300 -
- 350 -
- 400 -
- 450 -
- 500 -
- 550 -
- 600 -
- 650 -
- 700 -
- 750 -
- 800 -
- 850 -
- 900 -
*Maximum Sum Circular Subarray
- 950 -
- 1000 -
- 1050 -
- 1100 -
- 1150 -
- 1200 -
- 1250 -
- 1300 -
- 1350 -
- 1400 -
- 1450 -
- 1500 -
- 1550 -
- 1600 -
- 1650 -
- 1700 -
- 1750 -
- 1800 -
- 1850 -