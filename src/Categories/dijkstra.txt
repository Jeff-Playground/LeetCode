Used for one to many minimum path, doesn't work for when edges could be negative, example below:
       A
      / \
     /   \
    /     \
   5       2
  /         \
  B--(-10)--C
V={A,B,C} ; E = {(A,C,2), (A,B,5), (B,C,-10)}
Here use A as source, it will find AC and mark C as visited, but later BC makes ABC -5, less than original 2 which will
be missed in the result.

This can also be used for finding the minimum spanning tree.

Implementation uses a PriorityQueue to do BFS like search, where PriorityQueue can be used to store all usable edges, and
it's sorted based on the length from the source to the next reachable point. Here we can use a HashMap to maintain visited
nodes and their corresponding distances to the source.
Use one dimensional array: int[] last, to track the last node of the shortest path, because there's only one source, not
necessary to use two-dimensional array.

Note this is different from Prim's algorithm:
In Prim's algorithm, the PriorityQueue sort edges by distance to the set of the reached nodes.
In Dijkstra's algorithm, the PriorityQueue sort edges by distance to the source node.

- 300 -
- 350 -
- 400 -
- 450 -
- 500 -
LQTheMazeII
- 550 -
- 600 -
- 650 -
- 700 -
*Network Delay Time
- 750 -
*Swim in Rising Water
- 800 -
- 850 -
*Reachable Nodes In Subdivided Graph
- 900 -
- 950 -
- 1000 -
- 1050 -
- 1100 -
- 1150 -
- 1200 -
- 1250 -
- 1300 -
- 1350 -
- 1400 -
- 1450 -
- 1500 -
- 1550 -
- 1600 -
*Path With Minimum Effort
- 1650 -
- 1700 -
- 1750 -
- 1800 -
- 1850 -
- 1900 -
- 1950 -
- 2000 -
- 2050 -