Used for one to many minimum path, doesn't work for when edges could be negative, example below:
       A
      / \
     /   \
    /     \
   5       2
  /         \
  B--(-10)--C
V={A,B,C} ; E = {(A,C,2), (A,B,5), (B,C,-10)}
Here use A as source, it will find AC and mark C as visited, but later BC makes ABC -5, less than original 2 which will
be missed in the result.

Implementation uses a PriorityQueue to do BFS like search, where PriorityQueue can be used to store all usable edges, and
it's sorted based on the length to the next reachable point. In other words, the idea is to add a node which is closest
to the reached nodes group one at a time to a visited Set. Here using a HashMap to maintain visited nodes as well as the
corresponding distance is a good practice.
Use one dimensional array: int[] last, to track the last node of the shortest path, because there's only one source, not
necessary to use two dimensional array.

- 300 -
- 350 -
- 400 -
- 450 -
- 500 -
LQTheMazeII
- 550 -
- 600 -
- 650 -
- 700 -
*Network Delay Time
- 750 -
*Swim in Rising Water
- 800 -
- 850 -
*Reachable Nodes In Subdivided Graph
- 900 -